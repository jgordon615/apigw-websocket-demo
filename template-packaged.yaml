AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Globals:
  Function:
    CodeUri: ./backend/lambda
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 15
Resources:
  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: connectionId
        AttributeType: S
      KeySchema:
      - AttributeName: connectionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      TableName: clients
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name:
        Ref: AWS::StackName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  OnConnectLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-onconnect-function
      Handler: onconnect.handler
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: clients
      CodeUri: s3://aws-websockets/70289d5297cbb449d8b47eeeb2854586
  OnConnectFunctionResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: OnConnectLambdaFunction
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
  OnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      Description: OnConnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectLambdaFunction.Arn}/invocations
  OnConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: OnConnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: OnConnectIntegration
  OnDisconnectLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ondisconnect-function
      Handler: ondisconnect.handler
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: clients
      CodeUri: s3://aws-websockets/70289d5297cbb449d8b47eeeb2854586
  OnDisconnectFunctionResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: OnDisconnectLambdaFunction
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
  OnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      Description: OnDisconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectLambdaFunction.Arn}/invocations
  OnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: OnDisconnectRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: OnDisconnectIntegration
  ChatLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-onchat-function
      Handler: onchat.handler
      MemorySize: 256
      Policies:
      - DynamoDBCrudPolicy:
          TableName: clients
      - Statement:
        - Effect: Allow
          Action:
          - execute-api:ManageConnections
          - execute-api:Invoke
          Resource:
          - Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
      CodeUri: s3://aws-websockets/70289d5297cbb449d8b47eeeb2854586
  ChatFunctionResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName:
        Ref: ChatLambdaFunction
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WebSocketApi
      Description: Chat Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatLambdaFunction.Arn}/invocations
  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WebSocketApi
      RouteKey: chat
      AuthorizationType: NONE
      OperationName: ChatRoute
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ChatIntegration
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - OnConnectRoute
    - OnDisconnectRoute
    - ChatRoute
    Properties:
      ApiId:
        Ref: WebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      Description: Prod Stage
      DeploymentId:
        Ref: Deployment
      ApiId:
        Ref: WebSocketApi
